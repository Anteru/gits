# ===================== begin_copyright_notice ============================
#
# Copyright (C) 2023 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
# ===================== end_copyright_notice ==============================


project(gits)
cmake_minimum_required(VERSION 3.13)

find_package(Python3 COMPONENTS Interpreter)
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")

set_property(GLOBAL PROPERTY USE_FOLDERS ON)
set(CMAKE_SKIP_INSTALL_ALL_DEPENDENCY TRUE)

option(WITH_VULKAN "Build Vulkan component" ON)

option(WITH_OPENCL "Build OpenCL component" ON)

option(WITH_LEVELZERO "Build LevelZero component" ON)

if(WITH_LEVELZERO)
  if(Python3_VERSION VERSION_LESS "3.6")
    message(FATAL_ERROR "LevelZero codegen requires Python 3.6+ to work correctly.")
  endif()
endif()

execute_process(COMMAND ${Python3_EXECUTABLE} -c "import mako" RESULT_VARIABLE MAKO_IMPORT OUTPUT_QUIET ERROR_QUIET)
if(NOT MAKO_IMPORT EQUAL 0)
  message(FATAL_ERROR "Mako templates not installed. GITS requires Mako to generate files. Use 'pip install Mako' to install.")
endif()

option(WITH_OCLOC "Build Ocloc component" ON)

if(WIN32)
  set(OpenGL_INSTALL_SUBDIR "FilesToCopyOGL" CACHE INTERNAL "")
  set(OpenGLES_INSTALL_SUBDIR "FilesToCopyES" CACHE INTERNAL "")
  set(OpenCL_INSTALL_SUBDIR "FilesToCopyOCL" CACHE INTERNAL "")
  set(Vulkan_INSTALL_SUBDIR "FilesToCopyVulkan" CACHE INTERNAL "")
  set(VulkanLayer_INSTALL_SUBDIR "VulkanLayer" CACHE INTERNAL "")
  set(L0_INSTALL_SUBDIR "FilesToCopyL0" CACHE INTERNAL "")
elseif(UNIX)
  set(OpenGL_INSTALL_SUBDIR "OpenGL" CACHE INTERNAL "")
  set(OpenGLES_INSTALL_SUBDIR "OpenGL" CACHE INTERNAL "")
  set(OpenCL_INSTALL_SUBDIR "OpenCL" CACHE INTERNAL "")
  set(Vulkan_INSTALL_SUBDIR "Vulkan" CACHE INTERNAL "")
  set(VulkanLayer_INSTALL_SUBDIR "VulkanLayer" CACHE INTERNAL "")
  set(L0_INSTALL_SUBDIR "LevelZero" CACHE INTERNAL "")
else()
  set(OpenGL_INSTALL_SUBDIR "." CACHE INTERNAL "")
  set(OpenGLES_INSTALL_SUBDIR "." CACHE INTERNAL "")
  set(OpenCL_INSTALL_SUBDIR "." CACHE INTERNAL "")
  set(Vulkan_INSTALL_SUBDIR "." CACHE INTERNAL "")
  set(VulkanLayer_INSTALL_SUBDIR "." CACHE INTERNAL "")
  set(L0_INSTALL_SUBDIR "." CACHE INTERNAL "")
endif()

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -D_DEBUG")
set(CLANG_COMPILER CMAKE_CXX_COMPILER_ID STREQUAL "Clang")

if(UNIX AND NOT ARCH STREQUAL "-march=armv8-a")
  add_definitions(-msse4.2)
endif()

if(NOT MSVC)
  add_definitions(-Wall -Wno-unused-function -Wno-system-headers -Wno-write-strings -Wno-format -fno-strict-aliasing -fPIC -Doverride= "${ARCH}")
endif()

include(custom_functions)

include(import_boost)
if(UNIX)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-overloaded-virtual -Wno-unused-variable -Wno-conversion-null -Wno-pointer-arith -Wno-switch -Wno-deprecated-declarations -Werror")
elseif(MSVC)
  add_definitions(-D_CRT_SECURE_NO_WARNINGS -DWIN32_LEAN_AND_MEAN -DNOMINMAX)
  add_compile_options(/MP /W3 /wd4005 /wd4065 /wd4100 /wd4480 /wd4481 /wd4482 /wd4503 /wd4505 /wd4611 /wd4702 /wd4800 /wd4244 /wd4267 /wd4312 /bigobj)
  add_compile_options("/MT$<$<CONFIG:Debug>:d>")
  add_compile_options("$<$<NOT:$<CONFIG:Debug>>:/GS->")
  add_link_options(/DYNAMICBASE:NO /LARGEADDRESSAWARE /FIXED:NO)
  add_link_options("$<$<NOT:$<CONFIG:DEBUG>>:/OPT:REF>")
endif()

if(NOT MSVC AND NOT CLANG_COMPILER)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wl,--no-undefined")
endif()

if(NOT MSVC)
  # libpng needs to be built as c
  add_definitions(-fvisibility=hidden)
endif()

include(import_zlib)
include(import_libpng)
include(import_lua)
include(import_xxhash)
if (MSVC)
  include(import_stackwalker)
endif()
include(import_clheaders)
include(import_murmurhash)
include(import_renderdoc)

include_directories(common/include)
include_directories(OpenGL/common/include)
include_directories(OpenGL/GLIPlugin/include)
include_directories(OpenGL/recorder/include)
include_directories(player/include)
include_directories(recorder/include)

if(WITH_VULKAN)
  include_directories(Vulkan/interceptor/include)
  include_directories(Vulkan/common/include)
  include_directories(Vulkan/recorder/include)
  add_definitions(-DWITH_VULKAN)
  add_subdirectory(Vulkan)
endif()
if(WITH_OCLOC)
  include_directories(ocloc/interceptor/include)
  include_directories(ocloc/common/include)
  include_directories(ocloc/recorder)
  add_definitions(-DWITH_OCLOC)
  add_subdirectory(ocloc)
endif()
if(WITH_OPENCL)
  include_directories(OpenCL/interceptor/include)
  include_directories(OpenCL/common/include)
  include_directories(OpenCL/recorder/include)
  add_definitions(-DWITH_OPENCL)
  add_subdirectory(OpenCL)
endif()
if(WITH_LEVELZERO)
  include_directories(LevelZero/interceptor/include)
  include_directories(LevelZero/common/include)
  include_directories(LevelZero/recorder)
  add_definitions(-DWITH_LEVELZERO)
  add_subdirectory(LevelZero)
  if(WITH_OPENCL)
    add_dependencies(L0_common OpenCL_codegen)
  endif()
endif()

add_subdirectory(common)
add_subdirectory(OpenGL)
add_subdirectory(player)
add_subdirectory(recorder)

if(ARCH AND NOT MSVC)
  set_target_properties(gitsPlayer PROPERTIES LINK_FLAGS ${ARCH})
  set_target_properties(GitsRecorder PROPERTIES LINK_FLAGS ${ARCH})
  set_target_properties(OpenGL_interceptor PROPERTIES LINK_FLAGS ${ARCH})
  if(WITH_OPENCL)
    set_target_properties(OpenCL_interceptor PROPERTIES LINK_FLAGS ${ARCH})
  endif()
endif()
if(WITH_VULKAN AND NOT MSVC)
  set_target_properties(Vulkan_interceptor PROPERTIES LINK_FLAGS ${ARCH})
  set_target_properties(Vulkan_layer PROPERTIES LINK_FLAGS ${ARCH})
endif()
if(WITH_LEVELZERO AND NOT MSVC)
  set_target_properties(L0_interceptor PROPERTIES LINK_FLAGS ${ARCH})
endif()
if(WITH_OCLOC AND NOT MSVC)
  set_target_properties(ocloc_interceptor PROPERTIES LINK_FLAGS ${ARCH})
endif()

install(DIRECTORY Scripts/Lua/ DESTINATION LuaScripts)

# CCode installation
install(DIRECTORY CCodeFiles/src/ DESTINATION CCode/CCodeSource)
install(FILES Scripts/install_dependencies.py DESTINATION CCode/Scripts/)
install(DIRECTORY third_party/patch/zlib DESTINATION CCode/third_party/patch)
install(DIRECTORY third_party/patch/libpng DESTINATION CCode/third_party/patch)
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/cmake/custom_functions.cmake DESTINATION CCode/cmake)
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/cmake/import_boost.cmake DESTINATION CCode/cmake)
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/cmake/import_zlib.cmake DESTINATION CCode/cmake)
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/cmake/import_libpng.cmake DESTINATION CCode/cmake)
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/cmake/import_xxhash.cmake DESTINATION CCode/cmake)
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/cmake/import_clheaders.cmake DESTINATION CCode/cmake)
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/cmake/import_murmurhash.cmake DESTINATION CCode/cmake)
install(FILES CCodeFiles/CMakeLists.txt DESTINATION CCode)
if(WIN32)
  install(FILES CCodeFiles/build_ccode.bat DESTINATION CCode)
elseif(UNIX)
  install(FILES CCodeFiles/build.linux DESTINATION CCode)
endif()
if(WIN32)
  if(WITH_VULKAN)
    if("${CMAKE_GENERATOR_PLATFORM}" MATCHES "Win32")
	  set(PLATFORM Win32)
	else()
	  set(PLATFORM x64)
	endif()
    set(INSTALL_GITS_VK_LAYER ${CMAKE_CURRENT_SOURCE_DIR}/Scripts/Installer/install_vulkan_layer.bat)
	set(LAYER_DLL_PATH "Recorder\\\\${VulkanLayer_INSTALL_SUBDIR}")
    install(CODE "execute_process(COMMAND cmd /c \"${INSTALL_GITS_VK_LAYER}\" \"${PLATFORM}\" \"\${CMAKE_INSTALL_PREFIX}\\\\${LAYER_DLL_PATH}\\\\\")")
  endif()
endif()
