#!/usr/bin/python

# ===================== begin_copyright_notice ============================
#
# Copyright (C) 2023-2025 Intel Corporation
#
# SPDX-License-Identifier: MIT
#
# ===================== end_copyright_notice ==============================

from intermediates import Api
import json
import os

# The command_ids.json file is necessary to ensure Command IDs are consistent
# across DirectX header updates
#
# An empty command_ids.json will look like this:
#
# {
#     "command_count": {
#         "COMMON": 4,
#         "DXGI": 1,
#         "DXGI_DEBUG": 1,
#         "D3D12": 1,
#         "D3D12_DEBUG": 1,
#         "DML": 1,
#         "XESS": 1,
#         "DSTORAGE": 1
#     },
#     "command_ids": {
#         "COMMON": {},
#         "DXGI": {},
#         "DXGI_DEBUG": {},
#         "D3D12": {},
#         "D3D12_DEBUG": {},
#         "DML": {},
#         "XESS": {},
#         "DSTORAGE": {}
#     }
# }
#
# command_count contains the existing command counts for each API. This includes
# the _BEGIN command as well as any non-autogenerated commands (such as ID_IUNKNOWN_QUERYINTERFACE)
#
# command_ids contains the list of unique command ids that are auto generated per API

ID_META_BEGIN = 13 * 0x10000 # gits::CToken::ID_DirectX
ID_COMMON_BEGIN = ID_META_BEGIN + 0x500
ID_DXGI_BEGIN = ID_COMMON_BEGIN + 0x500
ID_DXGI_DEBUG_BEGIN = ID_DXGI_BEGIN + 0x500
ID_D3D12_BEGIN = ID_DXGI_DEBUG_BEGIN + 0x500
ID_D3D12_DEBUG_BEGIN = ID_D3D12_BEGIN + 0x500
ID_DML_BEGIN = ID_D3D12_DEBUG_BEGIN + 0x500
ID_INTEL_EXTENSIONS_BEGIN = ID_DML_BEGIN + 0x500
ID_XESS_BEGIN = ID_INTEL_EXTENSIONS_BEGIN + 0x500
ID_DSTORAGE_BEGIN = ID_XESS_BEGIN + 0x500

def cache_command(cache, api, cmd_name):
    if cmd_name in cache['command_ids'][api.name]:
        return
    
    # Set the offset
    cmd_id = None
    if api == Api.COMMON:
        cmd_id = ID_COMMON_BEGIN
    elif api == Api.DXGI:
        cmd_id = ID_DXGI_BEGIN
    elif api == Api.DXGI_DEBUG:
        cmd_id = ID_DXGI_DEBUG_BEGIN
    elif api == Api.D3D12:
        cmd_id = ID_D3D12_BEGIN
    elif api == Api.D3D12_DEBUG:
        cmd_id = ID_D3D12_DEBUG_BEGIN
    elif api == Api.DML:
        cmd_id = ID_DML_BEGIN
    elif api == Api.XESS:
      cmd_id = ID_XESS_BEGIN
    elif api == Api.DSTORAGE:
        cmd_id = ID_DSTORAGE_BEGIN
    cmd_id += cache['command_count'][api.name]

    cache['command_count'][api.name] += 1
    cache['command_ids'][api.name][cmd_name] = cmd_id

def build_command_ids(context, out_path, update_command_ids_file):
    command_ids_file = os.path.join(out_path, 'command_ids.json')
    command_ids_cache = {}

    if not os.path.exists(command_ids_file):
        print(command_ids_file + ' not found. Cannot generate Command IDs!')
        exit(-1)

    with open(command_ids_file, 'r') as f:
        command_ids_cache = json.load(f)

    if update_command_ids_file:
        # Generate a command list for each API
        api_commands = {}
        for api in Api:
            api_commands[api.name] = []
        
        for function in context['functions']:
            cmd_name = "ID_" + function.name.upper()
            api_commands[function.api.name].append(cmd_name)

        for interface in context['interfaces']:
            for function in interface.functions:
                cmd_name = "ID_" + interface.name.upper() + "_" + function.name.upper()
                api_commands[interface.api.name].append(cmd_name)
        
        # Cache all the commands
        for api in Api:
            for cmd_name in api_commands[api.name]:
                cache_command(command_ids_cache, api, cmd_name)

        with open(command_ids_file, 'w') as f:
            json.dump(command_ids_cache, f, indent = 4)
    
    return command_ids_cache['command_ids']
